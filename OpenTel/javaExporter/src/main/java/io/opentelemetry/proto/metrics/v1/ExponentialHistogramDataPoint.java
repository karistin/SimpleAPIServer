// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metrics/v1/metrics.proto

package io.opentelemetry.proto.metrics.v1;

/**
 * <pre>
 * ExponentialHistogramDataPoint is a single data point in a timeseries that describes the
 * time-varying values of a ExponentialHistogram of double values. A ExponentialHistogram contains
 * summary statistics for a population of values, it may optionally contain the
 * distribution of those values across a set of buckets.
 * </pre>
 *
 * Protobuf type {@code opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint}
 */
public final class ExponentialHistogramDataPoint extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)
    ExponentialHistogramDataPointOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ExponentialHistogramDataPoint.newBuilder() to construct.
  private ExponentialHistogramDataPoint(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ExponentialHistogramDataPoint() {
    attributes_ = java.util.Collections.emptyList();
    exemplars_ = java.util.Collections.emptyList();
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new ExponentialHistogramDataPoint();
  }

  @Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ExponentialHistogramDataPoint(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              attributes_ = new java.util.ArrayList<io.opentelemetry.proto.common.v1.KeyValue>();
              mutable_bitField0_ |= 0x00000001;
            }
            attributes_.add(
                input.readMessage(io.opentelemetry.proto.common.v1.KeyValue.parser(), extensionRegistry));
            break;
          }
          case 17: {

            startTimeUnixNano_ = input.readFixed64();
            break;
          }
          case 25: {

            timeUnixNano_ = input.readFixed64();
            break;
          }
          case 33: {

            count_ = input.readFixed64();
            break;
          }
          case 41: {

            sum_ = input.readDouble();
            break;
          }
          case 48: {

            scale_ = input.readSInt32();
            break;
          }
          case 57: {

            zeroCount_ = input.readFixed64();
            break;
          }
          case 66: {
            Buckets.Builder subBuilder = null;
            if (positive_ != null) {
              subBuilder = positive_.toBuilder();
            }
            positive_ = input.readMessage(Buckets.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(positive_);
              positive_ = subBuilder.buildPartial();
            }

            break;
          }
          case 74: {
            Buckets.Builder subBuilder = null;
            if (negative_ != null) {
              subBuilder = negative_.toBuilder();
            }
            negative_ = input.readMessage(Buckets.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(negative_);
              negative_ = subBuilder.buildPartial();
            }

            break;
          }
          case 80: {

            flags_ = input.readUInt32();
            break;
          }
          case 90: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              exemplars_ = new java.util.ArrayList<Exemplar>();
              mutable_bitField0_ |= 0x00000002;
            }
            exemplars_.add(
                input.readMessage(Exemplar.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        attributes_ = java.util.Collections.unmodifiableList(attributes_);
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        exemplars_ = java.util.Collections.unmodifiableList(exemplars_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return MetricsProto.internal_static_opentelemetry_proto_metrics_v1_ExponentialHistogramDataPoint_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return MetricsProto.internal_static_opentelemetry_proto_metrics_v1_ExponentialHistogramDataPoint_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            ExponentialHistogramDataPoint.class, Builder.class);
  }

  public interface BucketsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Offset is the bucket index of the first entry in the bucket_counts array.
     * 
     * Note: This uses a varint encoding as a simple form of compression.
     * </pre>
     *
     * <code>sint32 offset = 1;</code>
     * @return The offset.
     */
    int getOffset();

    /**
     * <pre>
     * Count is an array of counts, where count[i] carries the count
     * of the bucket at index (offset+i).  count[i] is the count of
     * values greater than or equal to base^(offset+i) and less than
     * base^(offset+i+1).
     * Note: By contrast, the explicit HistogramDataPoint uses
     * fixed64.  This field is expected to have many buckets,
     * especially zeros, so uint64 has been selected to ensure
     * varint encoding.
     * </pre>
     *
     * <code>repeated uint64 bucket_counts = 2;</code>
     * @return A list containing the bucketCounts.
     */
    java.util.List<Long> getBucketCountsList();
    /**
     * <pre>
     * Count is an array of counts, where count[i] carries the count
     * of the bucket at index (offset+i).  count[i] is the count of
     * values greater than or equal to base^(offset+i) and less than
     * base^(offset+i+1).
     * Note: By contrast, the explicit HistogramDataPoint uses
     * fixed64.  This field is expected to have many buckets,
     * especially zeros, so uint64 has been selected to ensure
     * varint encoding.
     * </pre>
     *
     * <code>repeated uint64 bucket_counts = 2;</code>
     * @return The count of bucketCounts.
     */
    int getBucketCountsCount();
    /**
     * <pre>
     * Count is an array of counts, where count[i] carries the count
     * of the bucket at index (offset+i).  count[i] is the count of
     * values greater than or equal to base^(offset+i) and less than
     * base^(offset+i+1).
     * Note: By contrast, the explicit HistogramDataPoint uses
     * fixed64.  This field is expected to have many buckets,
     * especially zeros, so uint64 has been selected to ensure
     * varint encoding.
     * </pre>
     *
     * <code>repeated uint64 bucket_counts = 2;</code>
     * @param index The index of the element to return.
     * @return The bucketCounts at the given index.
     */
    long getBucketCounts(int index);
  }
  /**
   * <pre>
   * Buckets are a set of bucket counts, encoded in a contiguous array
   * of counts.
   * </pre>
   *
   * Protobuf type {@code opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets}
   */
  public static final class Buckets extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)
      BucketsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Buckets.newBuilder() to construct.
    private Buckets(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Buckets() {
      bucketCounts_ = emptyLongList();
    }

    @Override
    @SuppressWarnings({"unused"})
    protected Object newInstance(
        UnusedPrivateParameter unused) {
      return new Buckets();
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Buckets(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              offset_ = input.readSInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                bucketCounts_ = newLongList();
                mutable_bitField0_ |= 0x00000001;
              }
              bucketCounts_.addLong(input.readUInt64());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) != 0) && input.getBytesUntilLimit() > 0) {
                bucketCounts_ = newLongList();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                bucketCounts_.addLong(input.readUInt64());
              }
              input.popLimit(limit);
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          bucketCounts_.makeImmutable(); // C
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MetricsProto.internal_static_opentelemetry_proto_metrics_v1_ExponentialHistogramDataPoint_Buckets_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MetricsProto.internal_static_opentelemetry_proto_metrics_v1_ExponentialHistogramDataPoint_Buckets_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Buckets.class, Builder.class);
    }

    public static final int OFFSET_FIELD_NUMBER = 1;
    private int offset_;
    /**
     * <pre>
     * Offset is the bucket index of the first entry in the bucket_counts array.
     * 
     * Note: This uses a varint encoding as a simple form of compression.
     * </pre>
     *
     * <code>sint32 offset = 1;</code>
     * @return The offset.
     */
    @Override
    public int getOffset() {
      return offset_;
    }

    public static final int BUCKET_COUNTS_FIELD_NUMBER = 2;
    private com.google.protobuf.Internal.LongList bucketCounts_;
    /**
     * <pre>
     * Count is an array of counts, where count[i] carries the count
     * of the bucket at index (offset+i).  count[i] is the count of
     * values greater than or equal to base^(offset+i) and less than
     * base^(offset+i+1).
     * Note: By contrast, the explicit HistogramDataPoint uses
     * fixed64.  This field is expected to have many buckets,
     * especially zeros, so uint64 has been selected to ensure
     * varint encoding.
     * </pre>
     *
     * <code>repeated uint64 bucket_counts = 2;</code>
     * @return A list containing the bucketCounts.
     */
    @Override
    public java.util.List<Long>
        getBucketCountsList() {
      return bucketCounts_;
    }
    /**
     * <pre>
     * Count is an array of counts, where count[i] carries the count
     * of the bucket at index (offset+i).  count[i] is the count of
     * values greater than or equal to base^(offset+i) and less than
     * base^(offset+i+1).
     * Note: By contrast, the explicit HistogramDataPoint uses
     * fixed64.  This field is expected to have many buckets,
     * especially zeros, so uint64 has been selected to ensure
     * varint encoding.
     * </pre>
     *
     * <code>repeated uint64 bucket_counts = 2;</code>
     * @return The count of bucketCounts.
     */
    public int getBucketCountsCount() {
      return bucketCounts_.size();
    }
    /**
     * <pre>
     * Count is an array of counts, where count[i] carries the count
     * of the bucket at index (offset+i).  count[i] is the count of
     * values greater than or equal to base^(offset+i) and less than
     * base^(offset+i+1).
     * Note: By contrast, the explicit HistogramDataPoint uses
     * fixed64.  This field is expected to have many buckets,
     * especially zeros, so uint64 has been selected to ensure
     * varint encoding.
     * </pre>
     *
     * <code>repeated uint64 bucket_counts = 2;</code>
     * @param index The index of the element to return.
     * @return The bucketCounts at the given index.
     */
    public long getBucketCounts(int index) {
      return bucketCounts_.getLong(index);
    }
    private int bucketCountsMemoizedSerializedSize = -1;

    private byte memoizedIsInitialized = -1;
    @Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (offset_ != 0) {
        output.writeSInt32(1, offset_);
      }
      if (getBucketCountsList().size() > 0) {
        output.writeUInt32NoTag(18);
        output.writeUInt32NoTag(bucketCountsMemoizedSerializedSize);
      }
      for (int i = 0; i < bucketCounts_.size(); i++) {
        output.writeUInt64NoTag(bucketCounts_.getLong(i));
      }
      unknownFields.writeTo(output);
    }

    @Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (offset_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, offset_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < bucketCounts_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt64SizeNoTag(bucketCounts_.getLong(i));
        }
        size += dataSize;
        if (!getBucketCountsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        bucketCountsMemoizedSerializedSize = dataSize;
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Buckets)) {
        return super.equals(obj);
      }
      Buckets other = (Buckets) obj;

      if (getOffset()
          != other.getOffset()) return false;
      if (!getBucketCountsList()
          .equals(other.getBucketCountsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + OFFSET_FIELD_NUMBER;
      hash = (53 * hash) + getOffset();
      if (getBucketCountsCount() > 0) {
        hash = (37 * hash) + BUCKET_COUNTS_FIELD_NUMBER;
        hash = (53 * hash) + getBucketCountsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Buckets parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Buckets parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Buckets parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Buckets parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Buckets parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Buckets parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Buckets parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Buckets parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Buckets parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Buckets parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Buckets parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Buckets parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Buckets prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Buckets are a set of bucket counts, encoded in a contiguous array
     * of counts.
     * </pre>
     *
     * Protobuf type {@code opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)
        BucketsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return MetricsProto.internal_static_opentelemetry_proto_metrics_v1_ExponentialHistogramDataPoint_Buckets_descriptor;
      }

      @Override
      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return MetricsProto.internal_static_opentelemetry_proto_metrics_v1_ExponentialHistogramDataPoint_Buckets_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Buckets.class, Builder.class);
      }

      // Construct using io.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @Override
      public Builder clear() {
        super.clear();
        offset_ = 0;

        bucketCounts_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return MetricsProto.internal_static_opentelemetry_proto_metrics_v1_ExponentialHistogramDataPoint_Buckets_descriptor;
      }

      @Override
      public Buckets getDefaultInstanceForType() {
        return Buckets.getDefaultInstance();
      }

      @Override
      public Buckets build() {
        Buckets result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @Override
      public Buckets buildPartial() {
        Buckets result = new Buckets(this);
        int from_bitField0_ = bitField0_;
        result.offset_ = offset_;
        if (((bitField0_ & 0x00000001) != 0)) {
          bucketCounts_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.bucketCounts_ = bucketCounts_;
        onBuilt();
        return result;
      }

      @Override
      public Builder clone() {
        return super.clone();
      }
      @Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.setField(field, value);
      }
      @Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return super.addRepeatedField(field, value);
      }
      @Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Buckets) {
          return mergeFrom((Buckets)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Buckets other) {
        if (other == Buckets.getDefaultInstance()) return this;
        if (other.getOffset() != 0) {
          setOffset(other.getOffset());
        }
        if (!other.bucketCounts_.isEmpty()) {
          if (bucketCounts_.isEmpty()) {
            bucketCounts_ = other.bucketCounts_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureBucketCountsIsMutable();
            bucketCounts_.addAll(other.bucketCounts_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @Override
      public final boolean isInitialized() {
        return true;
      }

      @Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Buckets parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (Buckets) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int offset_ ;
      /**
       * <pre>
       * Offset is the bucket index of the first entry in the bucket_counts array.
       * 
       * Note: This uses a varint encoding as a simple form of compression.
       * </pre>
       *
       * <code>sint32 offset = 1;</code>
       * @return The offset.
       */
      @Override
      public int getOffset() {
        return offset_;
      }
      /**
       * <pre>
       * Offset is the bucket index of the first entry in the bucket_counts array.
       * 
       * Note: This uses a varint encoding as a simple form of compression.
       * </pre>
       *
       * <code>sint32 offset = 1;</code>
       * @param value The offset to set.
       * @return This builder for chaining.
       */
      public Builder setOffset(int value) {
        
        offset_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Offset is the bucket index of the first entry in the bucket_counts array.
       * 
       * Note: This uses a varint encoding as a simple form of compression.
       * </pre>
       *
       * <code>sint32 offset = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearOffset() {
        
        offset_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.LongList bucketCounts_ = emptyLongList();
      private void ensureBucketCountsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          bucketCounts_ = mutableCopy(bucketCounts_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * Count is an array of counts, where count[i] carries the count
       * of the bucket at index (offset+i).  count[i] is the count of
       * values greater than or equal to base^(offset+i) and less than
       * base^(offset+i+1).
       * Note: By contrast, the explicit HistogramDataPoint uses
       * fixed64.  This field is expected to have many buckets,
       * especially zeros, so uint64 has been selected to ensure
       * varint encoding.
       * </pre>
       *
       * <code>repeated uint64 bucket_counts = 2;</code>
       * @return A list containing the bucketCounts.
       */
      public java.util.List<Long>
          getBucketCountsList() {
        return ((bitField0_ & 0x00000001) != 0) ?
                 java.util.Collections.unmodifiableList(bucketCounts_) : bucketCounts_;
      }
      /**
       * <pre>
       * Count is an array of counts, where count[i] carries the count
       * of the bucket at index (offset+i).  count[i] is the count of
       * values greater than or equal to base^(offset+i) and less than
       * base^(offset+i+1).
       * Note: By contrast, the explicit HistogramDataPoint uses
       * fixed64.  This field is expected to have many buckets,
       * especially zeros, so uint64 has been selected to ensure
       * varint encoding.
       * </pre>
       *
       * <code>repeated uint64 bucket_counts = 2;</code>
       * @return The count of bucketCounts.
       */
      public int getBucketCountsCount() {
        return bucketCounts_.size();
      }
      /**
       * <pre>
       * Count is an array of counts, where count[i] carries the count
       * of the bucket at index (offset+i).  count[i] is the count of
       * values greater than or equal to base^(offset+i) and less than
       * base^(offset+i+1).
       * Note: By contrast, the explicit HistogramDataPoint uses
       * fixed64.  This field is expected to have many buckets,
       * especially zeros, so uint64 has been selected to ensure
       * varint encoding.
       * </pre>
       *
       * <code>repeated uint64 bucket_counts = 2;</code>
       * @param index The index of the element to return.
       * @return The bucketCounts at the given index.
       */
      public long getBucketCounts(int index) {
        return bucketCounts_.getLong(index);
      }
      /**
       * <pre>
       * Count is an array of counts, where count[i] carries the count
       * of the bucket at index (offset+i).  count[i] is the count of
       * values greater than or equal to base^(offset+i) and less than
       * base^(offset+i+1).
       * Note: By contrast, the explicit HistogramDataPoint uses
       * fixed64.  This field is expected to have many buckets,
       * especially zeros, so uint64 has been selected to ensure
       * varint encoding.
       * </pre>
       *
       * <code>repeated uint64 bucket_counts = 2;</code>
       * @param index The index to set the value at.
       * @param value The bucketCounts to set.
       * @return This builder for chaining.
       */
      public Builder setBucketCounts(
          int index, long value) {
        ensureBucketCountsIsMutable();
        bucketCounts_.setLong(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Count is an array of counts, where count[i] carries the count
       * of the bucket at index (offset+i).  count[i] is the count of
       * values greater than or equal to base^(offset+i) and less than
       * base^(offset+i+1).
       * Note: By contrast, the explicit HistogramDataPoint uses
       * fixed64.  This field is expected to have many buckets,
       * especially zeros, so uint64 has been selected to ensure
       * varint encoding.
       * </pre>
       *
       * <code>repeated uint64 bucket_counts = 2;</code>
       * @param value The bucketCounts to add.
       * @return This builder for chaining.
       */
      public Builder addBucketCounts(long value) {
        ensureBucketCountsIsMutable();
        bucketCounts_.addLong(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Count is an array of counts, where count[i] carries the count
       * of the bucket at index (offset+i).  count[i] is the count of
       * values greater than or equal to base^(offset+i) and less than
       * base^(offset+i+1).
       * Note: By contrast, the explicit HistogramDataPoint uses
       * fixed64.  This field is expected to have many buckets,
       * especially zeros, so uint64 has been selected to ensure
       * varint encoding.
       * </pre>
       *
       * <code>repeated uint64 bucket_counts = 2;</code>
       * @param values The bucketCounts to add.
       * @return This builder for chaining.
       */
      public Builder addAllBucketCounts(
          Iterable<? extends Long> values) {
        ensureBucketCountsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, bucketCounts_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Count is an array of counts, where count[i] carries the count
       * of the bucket at index (offset+i).  count[i] is the count of
       * values greater than or equal to base^(offset+i) and less than
       * base^(offset+i+1).
       * Note: By contrast, the explicit HistogramDataPoint uses
       * fixed64.  This field is expected to have many buckets,
       * especially zeros, so uint64 has been selected to ensure
       * varint encoding.
       * </pre>
       *
       * <code>repeated uint64 bucket_counts = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearBucketCounts() {
        bucketCounts_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      @Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)
    }

    // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)
    private static final Buckets DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Buckets();
    }

    public static Buckets getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Buckets>
        PARSER = new com.google.protobuf.AbstractParser<Buckets>() {
      @Override
      public Buckets parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Buckets(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Buckets> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<Buckets> getParserForType() {
      return PARSER;
    }

    @Override
    public Buckets getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int ATTRIBUTES_FIELD_NUMBER = 1;
  private java.util.List<io.opentelemetry.proto.common.v1.KeyValue> attributes_;
  /**
   * <pre>
   * The set of key/value pairs that uniquely identify the timeseries from
   * where this point belongs. The list may be empty (may contain 0 elements).
   * Attribute keys MUST be unique (it is not allowed to have more than one
   * attribute with the same key).
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;</code>
   */
  @Override
  public java.util.List<io.opentelemetry.proto.common.v1.KeyValue> getAttributesList() {
    return attributes_;
  }
  /**
   * <pre>
   * The set of key/value pairs that uniquely identify the timeseries from
   * where this point belongs. The list may be empty (may contain 0 elements).
   * Attribute keys MUST be unique (it is not allowed to have more than one
   * attribute with the same key).
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;</code>
   */
  @Override
  public java.util.List<? extends io.opentelemetry.proto.common.v1.KeyValueOrBuilder> 
      getAttributesOrBuilderList() {
    return attributes_;
  }
  /**
   * <pre>
   * The set of key/value pairs that uniquely identify the timeseries from
   * where this point belongs. The list may be empty (may contain 0 elements).
   * Attribute keys MUST be unique (it is not allowed to have more than one
   * attribute with the same key).
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;</code>
   */
  @Override
  public int getAttributesCount() {
    return attributes_.size();
  }
  /**
   * <pre>
   * The set of key/value pairs that uniquely identify the timeseries from
   * where this point belongs. The list may be empty (may contain 0 elements).
   * Attribute keys MUST be unique (it is not allowed to have more than one
   * attribute with the same key).
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;</code>
   */
  @Override
  public io.opentelemetry.proto.common.v1.KeyValue getAttributes(int index) {
    return attributes_.get(index);
  }
  /**
   * <pre>
   * The set of key/value pairs that uniquely identify the timeseries from
   * where this point belongs. The list may be empty (may contain 0 elements).
   * Attribute keys MUST be unique (it is not allowed to have more than one
   * attribute with the same key).
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;</code>
   */
  @Override
  public io.opentelemetry.proto.common.v1.KeyValueOrBuilder getAttributesOrBuilder(
      int index) {
    return attributes_.get(index);
  }

  public static final int START_TIME_UNIX_NANO_FIELD_NUMBER = 2;
  private long startTimeUnixNano_;
  /**
   * <pre>
   * StartTimeUnixNano is optional but strongly encouraged, see the
   * the detailed comments above Metric.
   * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
   * 1970.
   * </pre>
   *
   * <code>fixed64 start_time_unix_nano = 2;</code>
   * @return The startTimeUnixNano.
   */
  @Override
  public long getStartTimeUnixNano() {
    return startTimeUnixNano_;
  }

  public static final int TIME_UNIX_NANO_FIELD_NUMBER = 3;
  private long timeUnixNano_;
  /**
   * <pre>
   * TimeUnixNano is required, see the detailed comments above Metric.
   * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
   * 1970.
   * </pre>
   *
   * <code>fixed64 time_unix_nano = 3;</code>
   * @return The timeUnixNano.
   */
  @Override
  public long getTimeUnixNano() {
    return timeUnixNano_;
  }

  public static final int COUNT_FIELD_NUMBER = 4;
  private long count_;
  /**
   * <pre>
   * count is the number of values in the population. Must be
   * non-negative. This value must be equal to the sum of the "bucket_counts"
   * values in the positive and negative Buckets plus the "zero_count" field.
   * </pre>
   *
   * <code>fixed64 count = 4;</code>
   * @return The count.
   */
  @Override
  public long getCount() {
    return count_;
  }

  public static final int SUM_FIELD_NUMBER = 5;
  private double sum_;
  /**
   * <pre>
   * sum of the values in the population. If count is zero then this field
   * must be zero.
   * Note: Sum should only be filled out when measuring non-negative discrete
   * events, and is assumed to be monotonic over the values of these events.
   * Negative events *can* be recorded, but sum should not be filled out when
   * doing so.  This is specifically to enforce compatibility w/ OpenMetrics,
   * see: https://github.com/OpenObservability/OpenMetrics/blob/main/specification/OpenMetrics.md#histogram
   * </pre>
   *
   * <code>double sum = 5;</code>
   * @return The sum.
   */
  @Override
  public double getSum() {
    return sum_;
  }

  public static final int SCALE_FIELD_NUMBER = 6;
  private int scale_;
  /**
   * <pre>
   * scale describes the resolution of the histogram.  Boundaries are
   * located at powers of the base, where:
   *   base = (2^(2^-scale))
   * The histogram bucket identified by `index`, a signed integer,
   * contains values that are greater than or equal to (base^index) and
   * less than (base^(index+1)).
   * The positive and negative ranges of the histogram are expressed
   * separately.  Negative values are mapped by their absolute value
   * into the negative range using the same scale as the positive range.
   * scale is not restricted by the protocol, as the permissible
   * values depend on the range of the data.
   * </pre>
   *
   * <code>sint32 scale = 6;</code>
   * @return The scale.
   */
  @Override
  public int getScale() {
    return scale_;
  }

  public static final int ZERO_COUNT_FIELD_NUMBER = 7;
  private long zeroCount_;
  /**
   * <pre>
   * zero_count is the count of values that are either exactly zero or
   * within the region considered zero by the instrumentation at the
   * tolerated degree of precision.  This bucket stores values that
   * cannot be expressed using the standard exponential formula as
   * well as values that have been rounded to zero.
   * Implementations MAY consider the zero bucket to have probability
   * mass equal to (zero_count / count).
   * </pre>
   *
   * <code>fixed64 zero_count = 7;</code>
   * @return The zeroCount.
   */
  @Override
  public long getZeroCount() {
    return zeroCount_;
  }

  public static final int POSITIVE_FIELD_NUMBER = 8;
  private Buckets positive_;
  /**
   * <pre>
   * positive carries the positive range of exponential bucket counts.
   * </pre>
   *
   * <code>.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets positive = 8;</code>
   * @return Whether the positive field is set.
   */
  @Override
  public boolean hasPositive() {
    return positive_ != null;
  }
  /**
   * <pre>
   * positive carries the positive range of exponential bucket counts.
   * </pre>
   *
   * <code>.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets positive = 8;</code>
   * @return The positive.
   */
  @Override
  public Buckets getPositive() {
    return positive_ == null ? Buckets.getDefaultInstance() : positive_;
  }
  /**
   * <pre>
   * positive carries the positive range of exponential bucket counts.
   * </pre>
   *
   * <code>.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets positive = 8;</code>
   */
  @Override
  public BucketsOrBuilder getPositiveOrBuilder() {
    return getPositive();
  }

  public static final int NEGATIVE_FIELD_NUMBER = 9;
  private Buckets negative_;
  /**
   * <pre>
   * negative carries the negative range of exponential bucket counts.
   * </pre>
   *
   * <code>.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets negative = 9;</code>
   * @return Whether the negative field is set.
   */
  @Override
  public boolean hasNegative() {
    return negative_ != null;
  }
  /**
   * <pre>
   * negative carries the negative range of exponential bucket counts.
   * </pre>
   *
   * <code>.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets negative = 9;</code>
   * @return The negative.
   */
  @Override
  public Buckets getNegative() {
    return negative_ == null ? Buckets.getDefaultInstance() : negative_;
  }
  /**
   * <pre>
   * negative carries the negative range of exponential bucket counts.
   * </pre>
   *
   * <code>.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets negative = 9;</code>
   */
  @Override
  public BucketsOrBuilder getNegativeOrBuilder() {
    return getNegative();
  }

  public static final int FLAGS_FIELD_NUMBER = 10;
  private int flags_;
  /**
   * <pre>
   * Flags that apply to this specific data point.  See DataPointFlags
   * for the available flags and their meaning.
   * </pre>
   *
   * <code>uint32 flags = 10;</code>
   * @return The flags.
   */
  @Override
  public int getFlags() {
    return flags_;
  }

  public static final int EXEMPLARS_FIELD_NUMBER = 11;
  private java.util.List<Exemplar> exemplars_;
  /**
   * <pre>
   * (Optional) List of exemplars collected from
   * measurements that were used to form the data point
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;</code>
   */
  @Override
  public java.util.List<Exemplar> getExemplarsList() {
    return exemplars_;
  }
  /**
   * <pre>
   * (Optional) List of exemplars collected from
   * measurements that were used to form the data point
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;</code>
   */
  @Override
  public java.util.List<? extends ExemplarOrBuilder>
      getExemplarsOrBuilderList() {
    return exemplars_;
  }
  /**
   * <pre>
   * (Optional) List of exemplars collected from
   * measurements that were used to form the data point
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;</code>
   */
  @Override
  public int getExemplarsCount() {
    return exemplars_.size();
  }
  /**
   * <pre>
   * (Optional) List of exemplars collected from
   * measurements that were used to form the data point
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;</code>
   */
  @Override
  public Exemplar getExemplars(int index) {
    return exemplars_.get(index);
  }
  /**
   * <pre>
   * (Optional) List of exemplars collected from
   * measurements that were used to form the data point
   * </pre>
   *
   * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;</code>
   */
  @Override
  public ExemplarOrBuilder getExemplarsOrBuilder(
      int index) {
    return exemplars_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < attributes_.size(); i++) {
      output.writeMessage(1, attributes_.get(i));
    }
    if (startTimeUnixNano_ != 0L) {
      output.writeFixed64(2, startTimeUnixNano_);
    }
    if (timeUnixNano_ != 0L) {
      output.writeFixed64(3, timeUnixNano_);
    }
    if (count_ != 0L) {
      output.writeFixed64(4, count_);
    }
    if (Double.doubleToRawLongBits(sum_) != 0) {
      output.writeDouble(5, sum_);
    }
    if (scale_ != 0) {
      output.writeSInt32(6, scale_);
    }
    if (zeroCount_ != 0L) {
      output.writeFixed64(7, zeroCount_);
    }
    if (positive_ != null) {
      output.writeMessage(8, getPositive());
    }
    if (negative_ != null) {
      output.writeMessage(9, getNegative());
    }
    if (flags_ != 0) {
      output.writeUInt32(10, flags_);
    }
    for (int i = 0; i < exemplars_.size(); i++) {
      output.writeMessage(11, exemplars_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < attributes_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, attributes_.get(i));
    }
    if (startTimeUnixNano_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeFixed64Size(2, startTimeUnixNano_);
    }
    if (timeUnixNano_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeFixed64Size(3, timeUnixNano_);
    }
    if (count_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeFixed64Size(4, count_);
    }
    if (Double.doubleToRawLongBits(sum_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(5, sum_);
    }
    if (scale_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeSInt32Size(6, scale_);
    }
    if (zeroCount_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeFixed64Size(7, zeroCount_);
    }
    if (positive_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, getPositive());
    }
    if (negative_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, getNegative());
    }
    if (flags_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(10, flags_);
    }
    for (int i = 0; i < exemplars_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, exemplars_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof ExponentialHistogramDataPoint)) {
      return super.equals(obj);
    }
    ExponentialHistogramDataPoint other = (ExponentialHistogramDataPoint) obj;

    if (!getAttributesList()
        .equals(other.getAttributesList())) return false;
    if (getStartTimeUnixNano()
        != other.getStartTimeUnixNano()) return false;
    if (getTimeUnixNano()
        != other.getTimeUnixNano()) return false;
    if (getCount()
        != other.getCount()) return false;
    if (Double.doubleToLongBits(getSum())
        != Double.doubleToLongBits(
            other.getSum())) return false;
    if (getScale()
        != other.getScale()) return false;
    if (getZeroCount()
        != other.getZeroCount()) return false;
    if (hasPositive() != other.hasPositive()) return false;
    if (hasPositive()) {
      if (!getPositive()
          .equals(other.getPositive())) return false;
    }
    if (hasNegative() != other.hasNegative()) return false;
    if (hasNegative()) {
      if (!getNegative()
          .equals(other.getNegative())) return false;
    }
    if (getFlags()
        != other.getFlags()) return false;
    if (!getExemplarsList()
        .equals(other.getExemplarsList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getAttributesCount() > 0) {
      hash = (37 * hash) + ATTRIBUTES_FIELD_NUMBER;
      hash = (53 * hash) + getAttributesList().hashCode();
    }
    hash = (37 * hash) + START_TIME_UNIX_NANO_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getStartTimeUnixNano());
    hash = (37 * hash) + TIME_UNIX_NANO_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getTimeUnixNano());
    hash = (37 * hash) + COUNT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getCount());
    hash = (37 * hash) + SUM_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        Double.doubleToLongBits(getSum()));
    hash = (37 * hash) + SCALE_FIELD_NUMBER;
    hash = (53 * hash) + getScale();
    hash = (37 * hash) + ZERO_COUNT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getZeroCount());
    if (hasPositive()) {
      hash = (37 * hash) + POSITIVE_FIELD_NUMBER;
      hash = (53 * hash) + getPositive().hashCode();
    }
    if (hasNegative()) {
      hash = (37 * hash) + NEGATIVE_FIELD_NUMBER;
      hash = (53 * hash) + getNegative().hashCode();
    }
    hash = (37 * hash) + FLAGS_FIELD_NUMBER;
    hash = (53 * hash) + getFlags();
    if (getExemplarsCount() > 0) {
      hash = (37 * hash) + EXEMPLARS_FIELD_NUMBER;
      hash = (53 * hash) + getExemplarsList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static ExponentialHistogramDataPoint parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ExponentialHistogramDataPoint parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ExponentialHistogramDataPoint parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ExponentialHistogramDataPoint parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ExponentialHistogramDataPoint parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static ExponentialHistogramDataPoint parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static ExponentialHistogramDataPoint parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static ExponentialHistogramDataPoint parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static ExponentialHistogramDataPoint parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static ExponentialHistogramDataPoint parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static ExponentialHistogramDataPoint parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static ExponentialHistogramDataPoint parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(ExponentialHistogramDataPoint prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * ExponentialHistogramDataPoint is a single data point in a timeseries that describes the
   * time-varying values of a ExponentialHistogram of double values. A ExponentialHistogram contains
   * summary statistics for a population of values, it may optionally contain the
   * distribution of those values across a set of buckets.
   * </pre>
   *
   * Protobuf type {@code opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)
      ExponentialHistogramDataPointOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return MetricsProto.internal_static_opentelemetry_proto_metrics_v1_ExponentialHistogramDataPoint_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return MetricsProto.internal_static_opentelemetry_proto_metrics_v1_ExponentialHistogramDataPoint_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              ExponentialHistogramDataPoint.class, Builder.class);
    }

    // Construct using io.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getAttributesFieldBuilder();
        getExemplarsFieldBuilder();
      }
    }
    @Override
    public Builder clear() {
      super.clear();
      if (attributesBuilder_ == null) {
        attributes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        attributesBuilder_.clear();
      }
      startTimeUnixNano_ = 0L;

      timeUnixNano_ = 0L;

      count_ = 0L;

      sum_ = 0D;

      scale_ = 0;

      zeroCount_ = 0L;

      if (positiveBuilder_ == null) {
        positive_ = null;
      } else {
        positive_ = null;
        positiveBuilder_ = null;
      }
      if (negativeBuilder_ == null) {
        negative_ = null;
      } else {
        negative_ = null;
        negativeBuilder_ = null;
      }
      flags_ = 0;

      if (exemplarsBuilder_ == null) {
        exemplars_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        exemplarsBuilder_.clear();
      }
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return MetricsProto.internal_static_opentelemetry_proto_metrics_v1_ExponentialHistogramDataPoint_descriptor;
    }

    @Override
    public ExponentialHistogramDataPoint getDefaultInstanceForType() {
      return ExponentialHistogramDataPoint.getDefaultInstance();
    }

    @Override
    public ExponentialHistogramDataPoint build() {
      ExponentialHistogramDataPoint result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public ExponentialHistogramDataPoint buildPartial() {
      ExponentialHistogramDataPoint result = new ExponentialHistogramDataPoint(this);
      int from_bitField0_ = bitField0_;
      if (attributesBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          attributes_ = java.util.Collections.unmodifiableList(attributes_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.attributes_ = attributes_;
      } else {
        result.attributes_ = attributesBuilder_.build();
      }
      result.startTimeUnixNano_ = startTimeUnixNano_;
      result.timeUnixNano_ = timeUnixNano_;
      result.count_ = count_;
      result.sum_ = sum_;
      result.scale_ = scale_;
      result.zeroCount_ = zeroCount_;
      if (positiveBuilder_ == null) {
        result.positive_ = positive_;
      } else {
        result.positive_ = positiveBuilder_.build();
      }
      if (negativeBuilder_ == null) {
        result.negative_ = negative_;
      } else {
        result.negative_ = negativeBuilder_.build();
      }
      result.flags_ = flags_;
      if (exemplarsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          exemplars_ = java.util.Collections.unmodifiableList(exemplars_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.exemplars_ = exemplars_;
      } else {
        result.exemplars_ = exemplarsBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof ExponentialHistogramDataPoint) {
        return mergeFrom((ExponentialHistogramDataPoint)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(ExponentialHistogramDataPoint other) {
      if (other == ExponentialHistogramDataPoint.getDefaultInstance()) return this;
      if (attributesBuilder_ == null) {
        if (!other.attributes_.isEmpty()) {
          if (attributes_.isEmpty()) {
            attributes_ = other.attributes_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureAttributesIsMutable();
            attributes_.addAll(other.attributes_);
          }
          onChanged();
        }
      } else {
        if (!other.attributes_.isEmpty()) {
          if (attributesBuilder_.isEmpty()) {
            attributesBuilder_.dispose();
            attributesBuilder_ = null;
            attributes_ = other.attributes_;
            bitField0_ = (bitField0_ & ~0x00000001);
            attributesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getAttributesFieldBuilder() : null;
          } else {
            attributesBuilder_.addAllMessages(other.attributes_);
          }
        }
      }
      if (other.getStartTimeUnixNano() != 0L) {
        setStartTimeUnixNano(other.getStartTimeUnixNano());
      }
      if (other.getTimeUnixNano() != 0L) {
        setTimeUnixNano(other.getTimeUnixNano());
      }
      if (other.getCount() != 0L) {
        setCount(other.getCount());
      }
      if (other.getSum() != 0D) {
        setSum(other.getSum());
      }
      if (other.getScale() != 0) {
        setScale(other.getScale());
      }
      if (other.getZeroCount() != 0L) {
        setZeroCount(other.getZeroCount());
      }
      if (other.hasPositive()) {
        mergePositive(other.getPositive());
      }
      if (other.hasNegative()) {
        mergeNegative(other.getNegative());
      }
      if (other.getFlags() != 0) {
        setFlags(other.getFlags());
      }
      if (exemplarsBuilder_ == null) {
        if (!other.exemplars_.isEmpty()) {
          if (exemplars_.isEmpty()) {
            exemplars_ = other.exemplars_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureExemplarsIsMutable();
            exemplars_.addAll(other.exemplars_);
          }
          onChanged();
        }
      } else {
        if (!other.exemplars_.isEmpty()) {
          if (exemplarsBuilder_.isEmpty()) {
            exemplarsBuilder_.dispose();
            exemplarsBuilder_ = null;
            exemplars_ = other.exemplars_;
            bitField0_ = (bitField0_ & ~0x00000002);
            exemplarsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getExemplarsFieldBuilder() : null;
          } else {
            exemplarsBuilder_.addAllMessages(other.exemplars_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      ExponentialHistogramDataPoint parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (ExponentialHistogramDataPoint) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<io.opentelemetry.proto.common.v1.KeyValue> attributes_ =
      java.util.Collections.emptyList();
    private void ensureAttributesIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        attributes_ = new java.util.ArrayList<io.opentelemetry.proto.common.v1.KeyValue>(attributes_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.opentelemetry.proto.common.v1.KeyValue, io.opentelemetry.proto.common.v1.KeyValue.Builder, io.opentelemetry.proto.common.v1.KeyValueOrBuilder> attributesBuilder_;

    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;</code>
     */
    public java.util.List<io.opentelemetry.proto.common.v1.KeyValue> getAttributesList() {
      if (attributesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(attributes_);
      } else {
        return attributesBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;</code>
     */
    public int getAttributesCount() {
      if (attributesBuilder_ == null) {
        return attributes_.size();
      } else {
        return attributesBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;</code>
     */
    public io.opentelemetry.proto.common.v1.KeyValue getAttributes(int index) {
      if (attributesBuilder_ == null) {
        return attributes_.get(index);
      } else {
        return attributesBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;</code>
     */
    public Builder setAttributes(
        int index, io.opentelemetry.proto.common.v1.KeyValue value) {
      if (attributesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAttributesIsMutable();
        attributes_.set(index, value);
        onChanged();
      } else {
        attributesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;</code>
     */
    public Builder setAttributes(
        int index, io.opentelemetry.proto.common.v1.KeyValue.Builder builderForValue) {
      if (attributesBuilder_ == null) {
        ensureAttributesIsMutable();
        attributes_.set(index, builderForValue.build());
        onChanged();
      } else {
        attributesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;</code>
     */
    public Builder addAttributes(io.opentelemetry.proto.common.v1.KeyValue value) {
      if (attributesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAttributesIsMutable();
        attributes_.add(value);
        onChanged();
      } else {
        attributesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;</code>
     */
    public Builder addAttributes(
        int index, io.opentelemetry.proto.common.v1.KeyValue value) {
      if (attributesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAttributesIsMutable();
        attributes_.add(index, value);
        onChanged();
      } else {
        attributesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;</code>
     */
    public Builder addAttributes(
        io.opentelemetry.proto.common.v1.KeyValue.Builder builderForValue) {
      if (attributesBuilder_ == null) {
        ensureAttributesIsMutable();
        attributes_.add(builderForValue.build());
        onChanged();
      } else {
        attributesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;</code>
     */
    public Builder addAttributes(
        int index, io.opentelemetry.proto.common.v1.KeyValue.Builder builderForValue) {
      if (attributesBuilder_ == null) {
        ensureAttributesIsMutable();
        attributes_.add(index, builderForValue.build());
        onChanged();
      } else {
        attributesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;</code>
     */
    public Builder addAllAttributes(
        Iterable<? extends io.opentelemetry.proto.common.v1.KeyValue> values) {
      if (attributesBuilder_ == null) {
        ensureAttributesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, attributes_);
        onChanged();
      } else {
        attributesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;</code>
     */
    public Builder clearAttributes() {
      if (attributesBuilder_ == null) {
        attributes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        attributesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;</code>
     */
    public Builder removeAttributes(int index) {
      if (attributesBuilder_ == null) {
        ensureAttributesIsMutable();
        attributes_.remove(index);
        onChanged();
      } else {
        attributesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;</code>
     */
    public io.opentelemetry.proto.common.v1.KeyValue.Builder getAttributesBuilder(
        int index) {
      return getAttributesFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;</code>
     */
    public io.opentelemetry.proto.common.v1.KeyValueOrBuilder getAttributesOrBuilder(
        int index) {
      if (attributesBuilder_ == null) {
        return attributes_.get(index);  } else {
        return attributesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;</code>
     */
    public java.util.List<? extends io.opentelemetry.proto.common.v1.KeyValueOrBuilder> 
         getAttributesOrBuilderList() {
      if (attributesBuilder_ != null) {
        return attributesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(attributes_);
      }
    }
    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;</code>
     */
    public io.opentelemetry.proto.common.v1.KeyValue.Builder addAttributesBuilder() {
      return getAttributesFieldBuilder().addBuilder(
          io.opentelemetry.proto.common.v1.KeyValue.getDefaultInstance());
    }
    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;</code>
     */
    public io.opentelemetry.proto.common.v1.KeyValue.Builder addAttributesBuilder(
        int index) {
      return getAttributesFieldBuilder().addBuilder(
          index, io.opentelemetry.proto.common.v1.KeyValue.getDefaultInstance());
    }
    /**
     * <pre>
     * The set of key/value pairs that uniquely identify the timeseries from
     * where this point belongs. The list may be empty (may contain 0 elements).
     * Attribute keys MUST be unique (it is not allowed to have more than one
     * attribute with the same key).
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.common.v1.KeyValue attributes = 1;</code>
     */
    public java.util.List<io.opentelemetry.proto.common.v1.KeyValue.Builder> 
         getAttributesBuilderList() {
      return getAttributesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.opentelemetry.proto.common.v1.KeyValue, io.opentelemetry.proto.common.v1.KeyValue.Builder, io.opentelemetry.proto.common.v1.KeyValueOrBuilder> 
        getAttributesFieldBuilder() {
      if (attributesBuilder_ == null) {
        attributesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.opentelemetry.proto.common.v1.KeyValue, io.opentelemetry.proto.common.v1.KeyValue.Builder, io.opentelemetry.proto.common.v1.KeyValueOrBuilder>(
                attributes_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        attributes_ = null;
      }
      return attributesBuilder_;
    }

    private long startTimeUnixNano_ ;
    /**
     * <pre>
     * StartTimeUnixNano is optional but strongly encouraged, see the
     * the detailed comments above Metric.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 start_time_unix_nano = 2;</code>
     * @return The startTimeUnixNano.
     */
    @Override
    public long getStartTimeUnixNano() {
      return startTimeUnixNano_;
    }
    /**
     * <pre>
     * StartTimeUnixNano is optional but strongly encouraged, see the
     * the detailed comments above Metric.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 start_time_unix_nano = 2;</code>
     * @param value The startTimeUnixNano to set.
     * @return This builder for chaining.
     */
    public Builder setStartTimeUnixNano(long value) {
      
      startTimeUnixNano_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * StartTimeUnixNano is optional but strongly encouraged, see the
     * the detailed comments above Metric.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 start_time_unix_nano = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearStartTimeUnixNano() {
      
      startTimeUnixNano_ = 0L;
      onChanged();
      return this;
    }

    private long timeUnixNano_ ;
    /**
     * <pre>
     * TimeUnixNano is required, see the detailed comments above Metric.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 time_unix_nano = 3;</code>
     * @return The timeUnixNano.
     */
    @Override
    public long getTimeUnixNano() {
      return timeUnixNano_;
    }
    /**
     * <pre>
     * TimeUnixNano is required, see the detailed comments above Metric.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 time_unix_nano = 3;</code>
     * @param value The timeUnixNano to set.
     * @return This builder for chaining.
     */
    public Builder setTimeUnixNano(long value) {
      
      timeUnixNano_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * TimeUnixNano is required, see the detailed comments above Metric.
     * Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January
     * 1970.
     * </pre>
     *
     * <code>fixed64 time_unix_nano = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearTimeUnixNano() {
      
      timeUnixNano_ = 0L;
      onChanged();
      return this;
    }

    private long count_ ;
    /**
     * <pre>
     * count is the number of values in the population. Must be
     * non-negative. This value must be equal to the sum of the "bucket_counts"
     * values in the positive and negative Buckets plus the "zero_count" field.
     * </pre>
     *
     * <code>fixed64 count = 4;</code>
     * @return The count.
     */
    @Override
    public long getCount() {
      return count_;
    }
    /**
     * <pre>
     * count is the number of values in the population. Must be
     * non-negative. This value must be equal to the sum of the "bucket_counts"
     * values in the positive and negative Buckets plus the "zero_count" field.
     * </pre>
     *
     * <code>fixed64 count = 4;</code>
     * @param value The count to set.
     * @return This builder for chaining.
     */
    public Builder setCount(long value) {
      
      count_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * count is the number of values in the population. Must be
     * non-negative. This value must be equal to the sum of the "bucket_counts"
     * values in the positive and negative Buckets plus the "zero_count" field.
     * </pre>
     *
     * <code>fixed64 count = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearCount() {
      
      count_ = 0L;
      onChanged();
      return this;
    }

    private double sum_ ;
    /**
     * <pre>
     * sum of the values in the population. If count is zero then this field
     * must be zero.
     * Note: Sum should only be filled out when measuring non-negative discrete
     * events, and is assumed to be monotonic over the values of these events.
     * Negative events *can* be recorded, but sum should not be filled out when
     * doing so.  This is specifically to enforce compatibility w/ OpenMetrics,
     * see: https://github.com/OpenObservability/OpenMetrics/blob/main/specification/OpenMetrics.md#histogram
     * </pre>
     *
     * <code>double sum = 5;</code>
     * @return The sum.
     */
    @Override
    public double getSum() {
      return sum_;
    }
    /**
     * <pre>
     * sum of the values in the population. If count is zero then this field
     * must be zero.
     * Note: Sum should only be filled out when measuring non-negative discrete
     * events, and is assumed to be monotonic over the values of these events.
     * Negative events *can* be recorded, but sum should not be filled out when
     * doing so.  This is specifically to enforce compatibility w/ OpenMetrics,
     * see: https://github.com/OpenObservability/OpenMetrics/blob/main/specification/OpenMetrics.md#histogram
     * </pre>
     *
     * <code>double sum = 5;</code>
     * @param value The sum to set.
     * @return This builder for chaining.
     */
    public Builder setSum(double value) {
      
      sum_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * sum of the values in the population. If count is zero then this field
     * must be zero.
     * Note: Sum should only be filled out when measuring non-negative discrete
     * events, and is assumed to be monotonic over the values of these events.
     * Negative events *can* be recorded, but sum should not be filled out when
     * doing so.  This is specifically to enforce compatibility w/ OpenMetrics,
     * see: https://github.com/OpenObservability/OpenMetrics/blob/main/specification/OpenMetrics.md#histogram
     * </pre>
     *
     * <code>double sum = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearSum() {
      
      sum_ = 0D;
      onChanged();
      return this;
    }

    private int scale_ ;
    /**
     * <pre>
     * scale describes the resolution of the histogram.  Boundaries are
     * located at powers of the base, where:
     *   base = (2^(2^-scale))
     * The histogram bucket identified by `index`, a signed integer,
     * contains values that are greater than or equal to (base^index) and
     * less than (base^(index+1)).
     * The positive and negative ranges of the histogram are expressed
     * separately.  Negative values are mapped by their absolute value
     * into the negative range using the same scale as the positive range.
     * scale is not restricted by the protocol, as the permissible
     * values depend on the range of the data.
     * </pre>
     *
     * <code>sint32 scale = 6;</code>
     * @return The scale.
     */
    @Override
    public int getScale() {
      return scale_;
    }
    /**
     * <pre>
     * scale describes the resolution of the histogram.  Boundaries are
     * located at powers of the base, where:
     *   base = (2^(2^-scale))
     * The histogram bucket identified by `index`, a signed integer,
     * contains values that are greater than or equal to (base^index) and
     * less than (base^(index+1)).
     * The positive and negative ranges of the histogram are expressed
     * separately.  Negative values are mapped by their absolute value
     * into the negative range using the same scale as the positive range.
     * scale is not restricted by the protocol, as the permissible
     * values depend on the range of the data.
     * </pre>
     *
     * <code>sint32 scale = 6;</code>
     * @param value The scale to set.
     * @return This builder for chaining.
     */
    public Builder setScale(int value) {
      
      scale_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * scale describes the resolution of the histogram.  Boundaries are
     * located at powers of the base, where:
     *   base = (2^(2^-scale))
     * The histogram bucket identified by `index`, a signed integer,
     * contains values that are greater than or equal to (base^index) and
     * less than (base^(index+1)).
     * The positive and negative ranges of the histogram are expressed
     * separately.  Negative values are mapped by their absolute value
     * into the negative range using the same scale as the positive range.
     * scale is not restricted by the protocol, as the permissible
     * values depend on the range of the data.
     * </pre>
     *
     * <code>sint32 scale = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearScale() {
      
      scale_ = 0;
      onChanged();
      return this;
    }

    private long zeroCount_ ;
    /**
     * <pre>
     * zero_count is the count of values that are either exactly zero or
     * within the region considered zero by the instrumentation at the
     * tolerated degree of precision.  This bucket stores values that
     * cannot be expressed using the standard exponential formula as
     * well as values that have been rounded to zero.
     * Implementations MAY consider the zero bucket to have probability
     * mass equal to (zero_count / count).
     * </pre>
     *
     * <code>fixed64 zero_count = 7;</code>
     * @return The zeroCount.
     */
    @Override
    public long getZeroCount() {
      return zeroCount_;
    }
    /**
     * <pre>
     * zero_count is the count of values that are either exactly zero or
     * within the region considered zero by the instrumentation at the
     * tolerated degree of precision.  This bucket stores values that
     * cannot be expressed using the standard exponential formula as
     * well as values that have been rounded to zero.
     * Implementations MAY consider the zero bucket to have probability
     * mass equal to (zero_count / count).
     * </pre>
     *
     * <code>fixed64 zero_count = 7;</code>
     * @param value The zeroCount to set.
     * @return This builder for chaining.
     */
    public Builder setZeroCount(long value) {
      
      zeroCount_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * zero_count is the count of values that are either exactly zero or
     * within the region considered zero by the instrumentation at the
     * tolerated degree of precision.  This bucket stores values that
     * cannot be expressed using the standard exponential formula as
     * well as values that have been rounded to zero.
     * Implementations MAY consider the zero bucket to have probability
     * mass equal to (zero_count / count).
     * </pre>
     *
     * <code>fixed64 zero_count = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearZeroCount() {
      
      zeroCount_ = 0L;
      onChanged();
      return this;
    }

    private Buckets positive_;
    private com.google.protobuf.SingleFieldBuilderV3<
        Buckets, Buckets.Builder, BucketsOrBuilder> positiveBuilder_;
    /**
     * <pre>
     * positive carries the positive range of exponential bucket counts.
     * </pre>
     *
     * <code>.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets positive = 8;</code>
     * @return Whether the positive field is set.
     */
    public boolean hasPositive() {
      return positiveBuilder_ != null || positive_ != null;
    }
    /**
     * <pre>
     * positive carries the positive range of exponential bucket counts.
     * </pre>
     *
     * <code>.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets positive = 8;</code>
     * @return The positive.
     */
    public Buckets getPositive() {
      if (positiveBuilder_ == null) {
        return positive_ == null ? Buckets.getDefaultInstance() : positive_;
      } else {
        return positiveBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * positive carries the positive range of exponential bucket counts.
     * </pre>
     *
     * <code>.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets positive = 8;</code>
     */
    public Builder setPositive(Buckets value) {
      if (positiveBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        positive_ = value;
        onChanged();
      } else {
        positiveBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * positive carries the positive range of exponential bucket counts.
     * </pre>
     *
     * <code>.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets positive = 8;</code>
     */
    public Builder setPositive(
        Buckets.Builder builderForValue) {
      if (positiveBuilder_ == null) {
        positive_ = builderForValue.build();
        onChanged();
      } else {
        positiveBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * positive carries the positive range of exponential bucket counts.
     * </pre>
     *
     * <code>.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets positive = 8;</code>
     */
    public Builder mergePositive(Buckets value) {
      if (positiveBuilder_ == null) {
        if (positive_ != null) {
          positive_ =
            Buckets.newBuilder(positive_).mergeFrom(value).buildPartial();
        } else {
          positive_ = value;
        }
        onChanged();
      } else {
        positiveBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * positive carries the positive range of exponential bucket counts.
     * </pre>
     *
     * <code>.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets positive = 8;</code>
     */
    public Builder clearPositive() {
      if (positiveBuilder_ == null) {
        positive_ = null;
        onChanged();
      } else {
        positive_ = null;
        positiveBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * positive carries the positive range of exponential bucket counts.
     * </pre>
     *
     * <code>.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets positive = 8;</code>
     */
    public Buckets.Builder getPositiveBuilder() {
      
      onChanged();
      return getPositiveFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * positive carries the positive range of exponential bucket counts.
     * </pre>
     *
     * <code>.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets positive = 8;</code>
     */
    public BucketsOrBuilder getPositiveOrBuilder() {
      if (positiveBuilder_ != null) {
        return positiveBuilder_.getMessageOrBuilder();
      } else {
        return positive_ == null ?
            Buckets.getDefaultInstance() : positive_;
      }
    }
    /**
     * <pre>
     * positive carries the positive range of exponential bucket counts.
     * </pre>
     *
     * <code>.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets positive = 8;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        Buckets, Buckets.Builder, BucketsOrBuilder>
        getPositiveFieldBuilder() {
      if (positiveBuilder_ == null) {
        positiveBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            Buckets, Buckets.Builder, BucketsOrBuilder>(
                getPositive(),
                getParentForChildren(),
                isClean());
        positive_ = null;
      }
      return positiveBuilder_;
    }

    private Buckets negative_;
    private com.google.protobuf.SingleFieldBuilderV3<
        Buckets, Buckets.Builder, BucketsOrBuilder> negativeBuilder_;
    /**
     * <pre>
     * negative carries the negative range of exponential bucket counts.
     * </pre>
     *
     * <code>.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets negative = 9;</code>
     * @return Whether the negative field is set.
     */
    public boolean hasNegative() {
      return negativeBuilder_ != null || negative_ != null;
    }
    /**
     * <pre>
     * negative carries the negative range of exponential bucket counts.
     * </pre>
     *
     * <code>.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets negative = 9;</code>
     * @return The negative.
     */
    public Buckets getNegative() {
      if (negativeBuilder_ == null) {
        return negative_ == null ? Buckets.getDefaultInstance() : negative_;
      } else {
        return negativeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * negative carries the negative range of exponential bucket counts.
     * </pre>
     *
     * <code>.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets negative = 9;</code>
     */
    public Builder setNegative(Buckets value) {
      if (negativeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        negative_ = value;
        onChanged();
      } else {
        negativeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * negative carries the negative range of exponential bucket counts.
     * </pre>
     *
     * <code>.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets negative = 9;</code>
     */
    public Builder setNegative(
        Buckets.Builder builderForValue) {
      if (negativeBuilder_ == null) {
        negative_ = builderForValue.build();
        onChanged();
      } else {
        negativeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * negative carries the negative range of exponential bucket counts.
     * </pre>
     *
     * <code>.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets negative = 9;</code>
     */
    public Builder mergeNegative(Buckets value) {
      if (negativeBuilder_ == null) {
        if (negative_ != null) {
          negative_ =
            Buckets.newBuilder(negative_).mergeFrom(value).buildPartial();
        } else {
          negative_ = value;
        }
        onChanged();
      } else {
        negativeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * negative carries the negative range of exponential bucket counts.
     * </pre>
     *
     * <code>.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets negative = 9;</code>
     */
    public Builder clearNegative() {
      if (negativeBuilder_ == null) {
        negative_ = null;
        onChanged();
      } else {
        negative_ = null;
        negativeBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * negative carries the negative range of exponential bucket counts.
     * </pre>
     *
     * <code>.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets negative = 9;</code>
     */
    public Buckets.Builder getNegativeBuilder() {
      
      onChanged();
      return getNegativeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * negative carries the negative range of exponential bucket counts.
     * </pre>
     *
     * <code>.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets negative = 9;</code>
     */
    public BucketsOrBuilder getNegativeOrBuilder() {
      if (negativeBuilder_ != null) {
        return negativeBuilder_.getMessageOrBuilder();
      } else {
        return negative_ == null ?
            Buckets.getDefaultInstance() : negative_;
      }
    }
    /**
     * <pre>
     * negative carries the negative range of exponential bucket counts.
     * </pre>
     *
     * <code>.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets negative = 9;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        Buckets, Buckets.Builder, BucketsOrBuilder>
        getNegativeFieldBuilder() {
      if (negativeBuilder_ == null) {
        negativeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            Buckets, Buckets.Builder, BucketsOrBuilder>(
                getNegative(),
                getParentForChildren(),
                isClean());
        negative_ = null;
      }
      return negativeBuilder_;
    }

    private int flags_ ;
    /**
     * <pre>
     * Flags that apply to this specific data point.  See DataPointFlags
     * for the available flags and their meaning.
     * </pre>
     *
     * <code>uint32 flags = 10;</code>
     * @return The flags.
     */
    @Override
    public int getFlags() {
      return flags_;
    }
    /**
     * <pre>
     * Flags that apply to this specific data point.  See DataPointFlags
     * for the available flags and their meaning.
     * </pre>
     *
     * <code>uint32 flags = 10;</code>
     * @param value The flags to set.
     * @return This builder for chaining.
     */
    public Builder setFlags(int value) {
      
      flags_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Flags that apply to this specific data point.  See DataPointFlags
     * for the available flags and their meaning.
     * </pre>
     *
     * <code>uint32 flags = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearFlags() {
      
      flags_ = 0;
      onChanged();
      return this;
    }

    private java.util.List<Exemplar> exemplars_ =
      java.util.Collections.emptyList();
    private void ensureExemplarsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        exemplars_ = new java.util.ArrayList<Exemplar>(exemplars_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        Exemplar, Exemplar.Builder, ExemplarOrBuilder> exemplarsBuilder_;

    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;</code>
     */
    public java.util.List<Exemplar> getExemplarsList() {
      if (exemplarsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(exemplars_);
      } else {
        return exemplarsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;</code>
     */
    public int getExemplarsCount() {
      if (exemplarsBuilder_ == null) {
        return exemplars_.size();
      } else {
        return exemplarsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;</code>
     */
    public Exemplar getExemplars(int index) {
      if (exemplarsBuilder_ == null) {
        return exemplars_.get(index);
      } else {
        return exemplarsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;</code>
     */
    public Builder setExemplars(
        int index, Exemplar value) {
      if (exemplarsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureExemplarsIsMutable();
        exemplars_.set(index, value);
        onChanged();
      } else {
        exemplarsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;</code>
     */
    public Builder setExemplars(
        int index, Exemplar.Builder builderForValue) {
      if (exemplarsBuilder_ == null) {
        ensureExemplarsIsMutable();
        exemplars_.set(index, builderForValue.build());
        onChanged();
      } else {
        exemplarsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;</code>
     */
    public Builder addExemplars(Exemplar value) {
      if (exemplarsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureExemplarsIsMutable();
        exemplars_.add(value);
        onChanged();
      } else {
        exemplarsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;</code>
     */
    public Builder addExemplars(
        int index, Exemplar value) {
      if (exemplarsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureExemplarsIsMutable();
        exemplars_.add(index, value);
        onChanged();
      } else {
        exemplarsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;</code>
     */
    public Builder addExemplars(
        Exemplar.Builder builderForValue) {
      if (exemplarsBuilder_ == null) {
        ensureExemplarsIsMutable();
        exemplars_.add(builderForValue.build());
        onChanged();
      } else {
        exemplarsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;</code>
     */
    public Builder addExemplars(
        int index, Exemplar.Builder builderForValue) {
      if (exemplarsBuilder_ == null) {
        ensureExemplarsIsMutable();
        exemplars_.add(index, builderForValue.build());
        onChanged();
      } else {
        exemplarsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;</code>
     */
    public Builder addAllExemplars(
        Iterable<? extends Exemplar> values) {
      if (exemplarsBuilder_ == null) {
        ensureExemplarsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, exemplars_);
        onChanged();
      } else {
        exemplarsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;</code>
     */
    public Builder clearExemplars() {
      if (exemplarsBuilder_ == null) {
        exemplars_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        exemplarsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;</code>
     */
    public Builder removeExemplars(int index) {
      if (exemplarsBuilder_ == null) {
        ensureExemplarsIsMutable();
        exemplars_.remove(index);
        onChanged();
      } else {
        exemplarsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;</code>
     */
    public Exemplar.Builder getExemplarsBuilder(
        int index) {
      return getExemplarsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;</code>
     */
    public ExemplarOrBuilder getExemplarsOrBuilder(
        int index) {
      if (exemplarsBuilder_ == null) {
        return exemplars_.get(index);  } else {
        return exemplarsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;</code>
     */
    public java.util.List<? extends ExemplarOrBuilder>
         getExemplarsOrBuilderList() {
      if (exemplarsBuilder_ != null) {
        return exemplarsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(exemplars_);
      }
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;</code>
     */
    public Exemplar.Builder addExemplarsBuilder() {
      return getExemplarsFieldBuilder().addBuilder(
          Exemplar.getDefaultInstance());
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;</code>
     */
    public Exemplar.Builder addExemplarsBuilder(
        int index) {
      return getExemplarsFieldBuilder().addBuilder(
          index, Exemplar.getDefaultInstance());
    }
    /**
     * <pre>
     * (Optional) List of exemplars collected from
     * measurements that were used to form the data point
     * </pre>
     *
     * <code>repeated .opentelemetry.proto.metrics.v1.Exemplar exemplars = 11;</code>
     */
    public java.util.List<Exemplar.Builder>
         getExemplarsBuilderList() {
      return getExemplarsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        Exemplar, Exemplar.Builder, ExemplarOrBuilder>
        getExemplarsFieldBuilder() {
      if (exemplarsBuilder_ == null) {
        exemplarsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            Exemplar, Exemplar.Builder, ExemplarOrBuilder>(
                exemplars_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        exemplars_ = null;
      }
      return exemplarsBuilder_;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)
  }

  // @@protoc_insertion_point(class_scope:opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)
  private static final ExponentialHistogramDataPoint DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new ExponentialHistogramDataPoint();
  }

  public static ExponentialHistogramDataPoint getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ExponentialHistogramDataPoint>
      PARSER = new com.google.protobuf.AbstractParser<ExponentialHistogramDataPoint>() {
    @Override
    public ExponentialHistogramDataPoint parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ExponentialHistogramDataPoint(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ExponentialHistogramDataPoint> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<ExponentialHistogramDataPoint> getParserForType() {
    return PARSER;
  }

  @Override
  public ExponentialHistogramDataPoint getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

